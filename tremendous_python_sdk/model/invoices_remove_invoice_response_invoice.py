# coding: utf-8

"""
    API Endpoints

    Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.

    The version of the OpenAPI document: 2
    Contact: developers@tremendous.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tremendous_python_sdk import schemas  # noqa: F401


class InvoicesRemoveInvoiceResponseInvoice(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Invoices are instruments to fund your Tremendous account's balance.

Invoices can be created by your organization programatically.
Once we receive your payment, the invoice is marked as `PAID` and we add
the respective funds to your account's balance.

    """


    class MetaOapg:
        required = {
            "paid_at",
            "amount",
            "created_at",
            "id",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            amount = schemas.Float64Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DELETED": "DELETED",
                        "PAID": "PAID",
                        "OPEN": "OPEN",
                        "MARKED_AS_PAID": "MARKED_AS_PAID",
                    }
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("PAID")
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("OPEN")
                
                @schemas.classproperty
                def MARKED_AS_PAID(cls):
                    return cls("MARKED_AS_PAID")
            created_at = schemas.DateSchema
            
            
            class paid_at(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paid_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class po_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'po_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def orders() -> typing.Type['InvoicesRemoveInvoiceResponseInvoiceOrders']:
                return InvoicesRemoveInvoiceResponseInvoiceOrders
        
            @staticmethod
            def rewards() -> typing.Type['InvoicesRemoveInvoiceResponseInvoiceRewards']:
                return InvoicesRemoveInvoiceResponseInvoiceRewards
            __annotations__ = {
                "id": id,
                "amount": amount,
                "status": status,
                "created_at": created_at,
                "paid_at": paid_at,
                "po_number": po_number,
                "orders": orders,
                "rewards": rewards,
            }
    
    paid_at: MetaOapg.properties.paid_at
    amount: MetaOapg.properties.amount
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_at"]) -> MetaOapg.properties.paid_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["po_number"]) -> MetaOapg.properties.po_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orders"]) -> 'InvoicesRemoveInvoiceResponseInvoiceOrders': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewards"]) -> 'InvoicesRemoveInvoiceResponseInvoiceRewards': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "amount", "status", "created_at", "paid_at", "po_number", "orders", "rewards", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_at"]) -> MetaOapg.properties.paid_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["po_number"]) -> typing.Union[MetaOapg.properties.po_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orders"]) -> typing.Union['InvoicesRemoveInvoiceResponseInvoiceOrders', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewards"]) -> typing.Union['InvoicesRemoveInvoiceResponseInvoiceRewards', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "amount", "status", "created_at", "paid_at", "po_number", "orders", "rewards", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paid_at: typing.Union[MetaOapg.properties.paid_at, None, str, date, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, date, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        po_number: typing.Union[MetaOapg.properties.po_number, None, str, schemas.Unset] = schemas.unset,
        orders: typing.Union['InvoicesRemoveInvoiceResponseInvoiceOrders', schemas.Unset] = schemas.unset,
        rewards: typing.Union['InvoicesRemoveInvoiceResponseInvoiceRewards', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoicesRemoveInvoiceResponseInvoice':
        return super().__new__(
            cls,
            *args,
            paid_at=paid_at,
            amount=amount,
            created_at=created_at,
            id=id,
            status=status,
            po_number=po_number,
            orders=orders,
            rewards=rewards,
            _configuration=_configuration,
            **kwargs,
        )

from tremendous_python_sdk.model.invoices_remove_invoice_response_invoice_orders import InvoicesRemoveInvoiceResponseInvoiceOrders
from tremendous_python_sdk.model.invoices_remove_invoice_response_invoice_rewards import InvoicesRemoveInvoiceResponseInvoiceRewards
