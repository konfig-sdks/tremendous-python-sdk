# coding: utf-8

"""
    API Endpoints

    Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.

    The version of the OpenAPI document: 2
    Contact: developers@tremendous.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from tremendous_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from tremendous_python_sdk.api_response import AsyncGeneratorResponse
from tremendous_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tremendous_python_sdk import schemas  # noqa: F401

from tremendous_python_sdk.model.invoices_get_pdf401_response import InvoicesGetPdf401Response as InvoicesGetPdf401ResponseSchema
from tremendous_python_sdk.model.invoices_get_pdf500_response import InvoicesGetPdf500Response as InvoicesGetPdf500ResponseSchema
from tremendous_python_sdk.model.invoices_get_pdf429_response import InvoicesGetPdf429Response as InvoicesGetPdf429ResponseSchema
from tremendous_python_sdk.model.invoices_get_pdf404_response import InvoicesGetPdf404Response as InvoicesGetPdf404ResponseSchema

from tremendous_python_sdk.type.invoices_get_pdf404_response import InvoicesGetPdf404Response
from tremendous_python_sdk.type.invoices_get_pdf429_response import InvoicesGetPdf429Response
from tremendous_python_sdk.type.invoices_get_pdf401_response import InvoicesGetPdf401Response
from tremendous_python_sdk.type.invoices_get_pdf500_response import InvoicesGetPdf500Response

from ...api_client import Dictionary
from tremendous_python_sdk.pydantic.invoices_get_pdf429_response import InvoicesGetPdf429Response as InvoicesGetPdf429ResponsePydantic
from tremendous_python_sdk.pydantic.invoices_get_pdf404_response import InvoicesGetPdf404Response as InvoicesGetPdf404ResponsePydantic
from tremendous_python_sdk.pydantic.invoices_get_pdf401_response import InvoicesGetPdf401Response as InvoicesGetPdf401ResponsePydantic
from tremendous_python_sdk.pydantic.invoices_get_pdf500_response import InvoicesGetPdf500Response as InvoicesGetPdf500ResponsePydantic

# Path params
IdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'id': typing.Union[IdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_id = api_client.PathParameter(
    name="id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IdSchema,
    required=True,
)
ContentDispositionSchema = schemas.StrSchema
SchemaFor200ResponseBodyApplicationPdf = schemas.BinarySchema
ResponseHeadersFor200 = typing_extensions.TypedDict(
    'ResponseHeadersFor200',
    {
        'Content-Disposition': ContentDispositionSchema,
    }
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.IO


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.IO


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/pdf': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationPdf),
    },
    headers=[
        content_disposition_parameter,
    ]
)
SchemaFor401ResponseBodyApplicationJson = InvoicesGetPdf401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: InvoicesGetPdf401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: InvoicesGetPdf401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = InvoicesGetPdf404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: InvoicesGetPdf404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: InvoicesGetPdf404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor429ResponseBodyApplicationJson = InvoicesGetPdf429ResponseSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: InvoicesGetPdf429Response


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: InvoicesGetPdf429Response


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = InvoicesGetPdf500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: InvoicesGetPdf500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: InvoicesGetPdf500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/pdf',
    'application/json',
)


class BaseApi(api_client.Api):

    def _get_pdf_mapped_args(
        self,
        id: str,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        if id is not None:
            _path_params["id"] = id
        args.path = _path_params
        return args

    async def _aget_pdf_oapg(
        self,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Retrieve invoice as PDF
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/invoices/{id}/pdf',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_pdf_oapg(
        self,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Retrieve invoice as PDF
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/invoices/{id}/pdf',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetPdfRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_pdf(
        self,
        id: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_pdf_mapped_args(
            id=id,
        )
        return await self._aget_pdf_oapg(
            path_params=args.path,
            **kwargs,
        )
    
    def get_pdf(
        self,
        id: str,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_pdf_mapped_args(
            id=id,
        )
        return self._get_pdf_oapg(
            path_params=args.path,
        )

class GetPdf(BaseApi):

    async def aget_pdf(
        self,
        id: str,
        validate: bool = False,
        **kwargs,
    ) -> typing.IO:
        raw_response = await self.raw.aget_pdf(
            id=id,
            **kwargs,
        )
        if validate:
            return RootModel[typing.IO](raw_response.body).root
        return raw_response.body
    
    
    def get_pdf(
        self,
        id: str,
        validate: bool = False,
    ) -> typing.IO:
        raw_response = self.raw.get_pdf(
            id=id,
        )
        if validate:
            return RootModel[typing.IO](raw_response.body).root
        return raw_response.body


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        id: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_pdf_mapped_args(
            id=id,
        )
        return await self._aget_pdf_oapg(
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        id: str,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_pdf_mapped_args(
            id=id,
        )
        return self._get_pdf_oapg(
            path_params=args.path,
        )

