# coding: utf-8

"""
    API Endpoints

    Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.

    The version of the OpenAPI document: 2
    Contact: developers@tremendous.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from tremendous_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from tremendous_python_sdk.api_response import AsyncGeneratorResponse
from tremendous_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tremendous_python_sdk import schemas  # noqa: F401

from tremendous_python_sdk.model.organizations_create_api_key429_response import OrganizationsCreateApiKey429Response as OrganizationsCreateApiKey429ResponseSchema
from tremendous_python_sdk.model.organizations_create_api_key500_response import OrganizationsCreateApiKey500Response as OrganizationsCreateApiKey500ResponseSchema
from tremendous_python_sdk.model.organizations_create_api_key401_response import OrganizationsCreateApiKey401Response as OrganizationsCreateApiKey401ResponseSchema
from tremendous_python_sdk.model.organizations_create_api_key404_response import OrganizationsCreateApiKey404Response as OrganizationsCreateApiKey404ResponseSchema
from tremendous_python_sdk.model.organizations_create_api_key_response import OrganizationsCreateApiKeyResponse as OrganizationsCreateApiKeyResponseSchema

from tremendous_python_sdk.type.organizations_create_api_key401_response import OrganizationsCreateApiKey401Response
from tremendous_python_sdk.type.organizations_create_api_key_response import OrganizationsCreateApiKeyResponse
from tremendous_python_sdk.type.organizations_create_api_key404_response import OrganizationsCreateApiKey404Response
from tremendous_python_sdk.type.organizations_create_api_key500_response import OrganizationsCreateApiKey500Response
from tremendous_python_sdk.type.organizations_create_api_key429_response import OrganizationsCreateApiKey429Response

from ...api_client import Dictionary
from tremendous_python_sdk.pydantic.organizations_create_api_key404_response import OrganizationsCreateApiKey404Response as OrganizationsCreateApiKey404ResponsePydantic
from tremendous_python_sdk.pydantic.organizations_create_api_key_response import OrganizationsCreateApiKeyResponse as OrganizationsCreateApiKeyResponsePydantic
from tremendous_python_sdk.pydantic.organizations_create_api_key401_response import OrganizationsCreateApiKey401Response as OrganizationsCreateApiKey401ResponsePydantic
from tremendous_python_sdk.pydantic.organizations_create_api_key429_response import OrganizationsCreateApiKey429Response as OrganizationsCreateApiKey429ResponsePydantic
from tremendous_python_sdk.pydantic.organizations_create_api_key500_response import OrganizationsCreateApiKey500Response as OrganizationsCreateApiKey500ResponsePydantic

from . import path

_auth = [
    'BearerApiKey',
]
SchemaFor200ResponseBodyApplicationJson = OrganizationsCreateApiKeyResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: OrganizationsCreateApiKeyResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: OrganizationsCreateApiKeyResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = OrganizationsCreateApiKey401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: OrganizationsCreateApiKey401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: OrganizationsCreateApiKey401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = OrganizationsCreateApiKey404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: OrganizationsCreateApiKey404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: OrganizationsCreateApiKey404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor429ResponseBodyApplicationJson = OrganizationsCreateApiKey429ResponseSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: OrganizationsCreateApiKey429Response


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: OrganizationsCreateApiKey429Response


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = OrganizationsCreateApiKey500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: OrganizationsCreateApiKey500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: OrganizationsCreateApiKey500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '401': _response_for_401,
    '404': _response_for_404,
    '429': _response_for_429,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_api_key_mapped_args(
        self,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        return args

    async def _acreate_api_key_oapg(
        self,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create API key
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/organizations/create_api_key',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_api_key_oapg(
        self,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create API key
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/organizations/create_api_key',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateApiKeyRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_api_key(
        self,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_api_key_mapped_args(
        )
        return await self._acreate_api_key_oapg(
            **kwargs,
        )
    
    def create_api_key(
        self,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_api_key_mapped_args(
        )
        return self._create_api_key_oapg(
        )

class CreateApiKey(BaseApi):

    async def acreate_api_key(
        self,
        validate: bool = False,
        **kwargs,
    ) -> OrganizationsCreateApiKeyResponsePydantic:
        raw_response = await self.raw.acreate_api_key(
            **kwargs,
        )
        if validate:
            return OrganizationsCreateApiKeyResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(OrganizationsCreateApiKeyResponsePydantic, raw_response.body)
    
    
    def create_api_key(
        self,
        validate: bool = False,
    ) -> OrganizationsCreateApiKeyResponsePydantic:
        raw_response = self.raw.create_api_key(
        )
        if validate:
            return OrganizationsCreateApiKeyResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(OrganizationsCreateApiKeyResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_api_key_mapped_args(
        )
        return await self._acreate_api_key_oapg(
            **kwargs,
        )
    
    def post(
        self,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_api_key_mapped_args(
        )
        return self._create_api_key_oapg(
        )

